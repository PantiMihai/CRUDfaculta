@page "/EmployeeTable"
@using System.Threading
@using CRUDfaculta.Controllers
@using CRUDfaculta.ViewModels
@inject HttpClient Http
@inject EmployeeController EmployeeController
@inject IDialogService DialogService

@rendermode InteractiveServer
<PageTitle>Employee Manager</PageTitle>



<MudContainer>

    <MudDataGrid @ref="dataGrid" T="EmployeeViewModel" ServerData="ServerReload" Filterable="false">
        <ToolBarContent>
            <MudButton StartIcon="@Icons.Material.Outlined.Add" Variant="Variant.Filled" Color="Color.Primary" Class="m-3" @onclick="CreateNewUser">
                Add New Employee
            </MudButton>
            <MudText Typo="Typo.h6">Employees Table</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.EmployeeIdView" Title="Employee Id" />
            <PropertyColumn Property="x => x.FullName" Title="Name" />
            <PropertyColumn Property="x => x.Department" Title="Department" />
            <PropertyColumn Property="x => x.BirthDate" Title="Birth date" Format="dd MM yyyy " />
            <PropertyColumn Property="x => x.Age" Title="Age" />
            <PropertyColumn Property="x => x.PhoneNumber" Title="Phone number" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="EmployeeViewModel" />
        </PagerContent>
    </MudDataGrid>

</MudContainer>
@code {
    MudDataGrid<EmployeeViewModel> dataGrid;
    string searchString = null;


    private async Task<GridData<EmployeeViewModel>> ServerReload(GridState<EmployeeViewModel> state)
    {
        IEnumerable<EmployeeViewModel> data = await EmployeeController.GetAllEmployees();
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.EmployeeIdView.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        var totalItems = data.Count();

        var sortDefinition = state.SortDefinitions.FirstOrDefault();
        if (sortDefinition != null)
        {
            switch (sortDefinition.SortBy)
            {
                case nameof(EmployeeViewModel.EmployeeIdView):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.EmployeeIdView
                    );
                    break;
                case nameof(EmployeeViewModel.FullName):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.FullName
                    );
                    break;
                case nameof(EmployeeViewModel.Department):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Department
                    );
                    break;
                case nameof(EmployeeViewModel.BirthDate):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.BirthDate
                    );
                    break;
                case nameof(EmployeeViewModel.Age):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.Age
                    );
                    break;
                case nameof(EmployeeViewModel.PhoneNumber):
                    data = data.OrderByDirection(
                        sortDefinition.Descending ? SortDirection.Descending : SortDirection.Ascending,
                        o => o.PhoneNumber
                    );
                    break;
            }
        }

        var pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new GridData<EmployeeViewModel>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private Task OnSearch(string text)
    {
        searchString = text;
        return dataGrid.ReloadServerData();
    }

    private async Task CreateNewUser()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Large };
        var dialog = await DialogService.ShowAsync<CreateEmployee>("Add Employee", options);
        var result = await dialog.Result;

        if(result != null && !result.Canceled)
        {
            await dataGrid.ReloadServerData();
        }
         
    }
}